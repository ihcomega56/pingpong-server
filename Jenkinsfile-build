def targetVersion

node {
    stage('リリースバージョンの入力') {
        targetVersion = input(
            id: 'userInput',
            message: '作成するバージョンを入力して下さい',
            parameters: [
                [$class: 'TextParameterDefinition',
                name: 'targetVersion',
                description: '作成するバージョン']
        ])
    }

    stage('Gitクローン') {
        git branch: 'master',
        credentialsId: 'github',
        url: 'https://github.com/ihcomega56/pingpong-server.git'
    }

    stage('ビルド, テスト, アーティファクトのプッシュ') {

        rtGradleResolver(id: 'pingpong-resolver',
          serverId: 'yokota',
          repo: 'jcenter'
        )
        rtGradleDeployer(
          id: 'pingpong-deployer',
          serverId: 'yokota',
          repo: 'pingpong-local'
        )
        rtBuildInfo(
          captureEnv: true,
          buildName: 'pingpong-server'
        )
        rtGradleRun(
          useWrapper: true,
          buildFile: 'build.gradle',
          tasks: 'clean test artifactoryPublish',
          resolverId: 'pingpong-resolver',
          deployerId: 'pingpong-deployer',
          // If the build name and build number are not set here, the current job name and number will be used:
          buildName: 'pingpong-server'
        )
    }

    stage('ビルドインフォのプッシュ') {
        rtPublishBuildInfo(
          serverId: 'yokota',
          buildName: 'pingpong-server'
        )
    }

    stage('メタデータの付与') {
        def setPropsSpec = "{\"files\": [{\"aql\": {\"items.find\":{\"name\":{\"\$match\":\"pingpong-server-" \
            + "${targetVersion}" \
            + "*.jar\"}}}}]}"
        def server = Artifactory.server 'yokota'
        server.setProps spec: setPropsSpec, props: "version=${targetVersion}"
    }

    stage('Xrayスキャン') {
        xrayScan(
          serverId: 'yokota',
          buildName: 'pingpong-server',
          failBuild: true
        )
  }
}